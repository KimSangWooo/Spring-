```jsx
jdbc.drivername=com.mysql.cj.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/kbo
jdbc.username=root
jdbc.password=root
```

@PropertySource 어노테이션 → 경로

@value → 이름

```jsx
package green.co.kr.config;

import javax.sql.DataSource;

import org.apache.commons.dbcp2.BasicDataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.jdbc.core.JdbcTemplate;

import com.mysql.cj.jdbc.JdbcConnection;

@Configuration
@PropertySource("classpath:green/co/kr/config/mysql.properties")
public class RootConfig {
	@Value("${jdbc.drivername}")
	private String drivername;
	@Value("${jdbc.url}")
	private String url;
	@Value("${jdbc.username}")
	private String username;
	@Value("${jdbc.password}")
	private String password;
	
	

	@Bean
	public DataSource dataSource() {
		BasicDataSource ds = new BasicDataSource();
		ds.setDriverClassName(drivername);
		ds.setUrl(url);
		ds.setUsername(username);
		ds.setPassword(password);
		return ds;
	}
	
	@Bean
	@Autowired
	public JdbcTemplate jdbcTemplate(DataSource ds) {
		return new JdbcTemplate(ds);
	}
}
```

```jsx
package green.co.kr;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@ContextConfiguration(classes = { green.co.kr.config.RootConfig.class })
public class DataSourceTest {
	@Autowired
	private DataSource ds;

	@Test
	public void testDS() {
		assertNotNull(ds);
	}

	@Test
	public void testConnection() throws SQLException {
		try (Connection conn = ds.getConnection();
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery("select 1")) {

			rs.next();
			int result = rs.getInt(1);

			assertEquals(1, result);
		}

	}
}
```

DAO 

jdbcTemplate 메소드를 활용해 해당 파라미터에 알맞은 객체를 넣어준다.

( select문은 새 클래스 생성 필요)

```jsx
package green.co.kr.model;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

@Repository
public class UserRepositoryMySQL implements UserRepository {
	@Autowired
	private JdbcTemplate jdbcTemplate;
	private UserRowMapper mapper = new UserRowMapper();

	private class UserRowMapper implements RowMapper<User> {
		@Override
		public User mapRow(ResultSet rs, int rowNum) throws SQLException {
			int id = rs.getInt("id");
			String name = rs.getString("name");
			int age = rs.getInt("age");

			return new User(id, name, age);
		}
	}

	@Override
	public int add(User user) {
		return jdbcTemplate.update("insert into users (name, age) values (?,?)", user.getName(), user.getAge());
	}

	@Override
	public List<User> list() {
		return jdbcTemplate.query("select * from users", mapper);
	}

}
```

```jsx
package green.co.kr.model.car;

import java.util.List;

public interface CarRepository {

	public List<Car> getAll();
	
	public Car getById(int id);
	
	public int add(Car car);
	
	public int update(Car car);
	
	public int delete(int id);
}
```

```jsx
package green.co.kr.model.car;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Component;

import green.co.kr.model.User;

@Component
public class CarRepoMySQL implements CarRepository {
	@Autowired
	private JdbcTemplate jdbcTemplate;
	private CarRowMapper mapper = new CarRowMapper();

	private class CarRowMapper implements RowMapper<Car> {
		@Override
		public Car mapRow(ResultSet rs, int rowNum) throws SQLException {
			int id = rs.getInt("id");
			String model = rs.getString("model");
			int price = rs.getInt("price");

			return new Car(id, model, price);
		}
	}

	@Override
	public List<Car> getAll() {
		return jdbcTemplate.query("select * from cars", mapper);
	};

	@Override
	public Car getById(int id) {
		return jdbcTemplate.queryForObject("select * from cars where id = ? ", mapper, id);
	}

	@Override
	public int add(Car car) {
		return jdbcTemplate.update("insert into cars (model, price) values (?,?)", car.getModel(), car.getPrice());
	}

	@Override
	public int update(Car car) {
		return jdbcTemplate.update("update into cars set model=?, price=?, where id=?", car.getModel(), car.getPrice(),
				car.getId());
	}

	@Override
	public int delete(int id) {
		return jdbcTemplate.update("delete  from cars where id = ? ", id);
	}
}
```

```jsx
package green.co.kr;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.Random;

import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import green.co.kr.model.car.Car;
import green.co.kr.model.car.CarRepository;

@RunWith(SpringRunner.class)
@ContextConfiguration(classes = {green.co.kr.config.RootConfig.class})
public class CarRepoTest {
	
	@Autowired
	private CarRepository repo;
	
	@Test
	public void initTest() {
		assertNotNull(repo);
	}
	
	@BeforeClass
	public static void addTestData() {
		//테스트 전에 됨
	}
	
	@Test
	public void create() {
		Random r = new Random();
		Car car = new Car();
		car.setModel("프로산게" + r.nextInt());
		car.setPrice(400000000);
		
		int result = repo.add(car);
		assertEquals(1, result);
	}
}
```

```jsx
package green.co.kr.model.car;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class CarService {

	@Autowired
	private CarRepository repo;
	
	@Transactional
	public int[] bulkInsert(List<Car> list) {
		int[] results = new int[list.size()];
		for (int i = 0; i < list.size(); i++) {
			repo.add(list.get(i));
		}
		
		return results;
	}
}
```

```jsx
package green.co.kr;

import static org.junit.Assert.assertNull;

import java.util.Arrays;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;

import green.co.kr.config.RootConfig;
import green.co.kr.model.car.Car;
import green.co.kr.model.car.CarService;

@RunWith(SpringRunner.class)
@ContextConfiguration(classes = RootConfig.class)
public class CarServiceTest {
	@Autowired
	private CarService service;

	@Test(expected = DataAccessException.class)
	public void bulkInsert() {
		List<Car> list = Arrays.asList(new Car(0, "AAA", 100), new Car(0, "BBB", 100), new Car(0, "AAA", 200));

		int[] result = service.bulkInsert(list);
	}
}
```
