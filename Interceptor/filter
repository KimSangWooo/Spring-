Interceptor 오버라이드

```jsx

@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		logger.info("1. 핸들러 처리전");

		HttpSession session = request.getSession(false);

		if (session.isNew()) {
			session.removeAttribute("burn");
		}
		request.setAttribute("burn", "새 어트리븉 생성");
		return true;
	}

@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {
		logger.info("3. 챈들러 처리 후, 뷰 생성 전");
		
		String value = (String) request.getAttribute("burn");
		value += ". 핸들러 처리 후 어트리븉 변경";
		request.setAttribute("burn", value);
	}

@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {
		logger.info("5.뷰 생성 후");

		HttpSession session = request.getSession(false);
		session.removeAttribute("burn");
	}
```

File 다루기

```jsx
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import green.co.kr.model.file.FileRepository;

@Controller
@RequestMapping("/file")
public class FileController {
	
	@Autowired
	private FileRepository repo;

	@GetMapping
	public String fileForm() {
		return "fileForm";
	}
	
	@PostMapping
	public String submit(@RequestParam MultipartFile upload) {
		String filename = upload.getOriginalFilename();
		int result = repo.save(upload);
		
		return "redirect:result";
	}
	
	@GetMapping("/result")
	public String view() {
		
		return "fileView";
	}
}
```

```jsx
package green.co.kr.model.file;

import java.util.List;

import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

public interface FileRepository {
	public Resource getByName(String fileName);
	public List<String> getAllNames();
	public int save(MultipartFile file);
}
```

```jsx
package green.co.kr.model.file;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

public class FileSystemRepo implements FileRepository {

	@Override
	public Resource getByName(String fileName) {
		throw new UnsupportedOperationException("미구현");
	}

	@Override
	public List<String> getAllNames() {
		throw new UnsupportedOperationException("미구현");
	}

	@Override
	public int save(MultipartFile file) {
		File saveFolder = new File("d:\\temp\\");
		if (!saveFolder.exists()) {
			saveFolder.mkdir();
		}
		try {
			file.transferTo(new File(saveFolder.getAbsolutePath() + file.getOriginalFilename()));
			return 1;
		} catch (IllegalStateException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return 0;
		}
	}

}
```

```jsx
@Override
	public List<String> getAllNames() {
		File[] filearr = saveFolder.listFiles(new FileFilter() {
			@Override
			public boolean accept(File pathname) {
				return !pathname.isDirectory();
			}
		});
		List<String> list = new ArrayList<>();
		for (File f : filearr) {
			list.add(f.getName());
		}
		return list;
	}
```

해당 경로에 첫번째 목록들을 반환함(walk 메소드) 자신도 똑같이 반환 

```jsx

try {
			Files.walk(Paths.get(root), 1).filter(x -> !x.equals(this.root)).filter(x -> !Files.isDirectory(x)).map(y -> y.toString()).collect(Collectors.toList());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
```

```jsx
@PostMapping
	public String submit(@RequestParam(value="upload") MultipartFile upload) {
		String filename = upload.getOriginalFilename();
		int result = repo.save(upload);

		return "redirect:file/result";
	}

	@GetMapping("/result")
	public String view(Model model) {
		List<String> list = repo.getAllNames();
		model.addAttribute("list", list);
		return "fileView";
	}
```

```jsx
@GetMapping("/down")
	public ResponseEntity<Resource> down(@RequestParam String item) throws UnsupportedEncodingException {
		Resource resource = repo.getByName(item);
		
		if (resource == null) {
			return (ResponseEntity<Resource>) ResponseEntity.notFound();
		}
		
		HttpHeaders headers = new HttpHeaders();
		headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
		headers.add("Content-Disposition", "attachment; filename=" + URLEncoder.encode(item, "utf-8"));
		
		return new ResponseEntity<>(resource, headers, HttpStatus.OK);
	}
```

```jsx
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<c:if test="${ not empty list} " />
	<ul>
		<c:forEach var="item" items="${ list }">
			<c:url value="/file/down?item=${item }" var="link" />
			<li><a href="${link}">{item }</a></li>

		</c:forEach>
	</ul>
</body>
</html>
```

파일 db

```jsx
package green.co.kr.model.file;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.multipart.MultipartFile;

public class FileDBRepository implements FileRepository {
	@Autowired
	private JdbcTemplate jdbc;

	@Override
	public Resource getByName(String fileName) {
		byte[] blob = jdbc.queryForObject("select file from files where name=?", byte[].class, fileName);
		return new ByteArrayResource(blob);
	}

	@Override
	public List<String> getAllNames() {
		return jdbc.queryForList("select name from files", String.class);
	}

	@Override
	public int save(MultipartFile file) {
		try {
			return jdbc.update("insert into files (name, file) values (?,?)" , file.getOriginalFilename(), file.getBytes());
		} catch (DataAccessException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}
	
	
}
```
