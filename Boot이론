1.스프링은 프레임워크이다 (정해진 틀을 기반으로 동작)

2.스프링은 오픈소스이다

3.스프링은 IOC(Inversion Of Controll) 컨테이너를 가진다 (주도권이 개발자 → 스프링에게 넘어감)

4.스프링은 DI를(Dependency Injection) 지원한다. (의존성 주입, 싱글톤 관리)

5.스프링은 많은 필터를 가지고 있다 (권한 탐색)

-fileter file web.xml

-interceptor

6.스프링은 많은 어노테이션을 가지고 있다 (리플렉션, 컴파일 체킹)

-어노테이션 (컴파일 힌트)

-리플렉션 (분석기법, 런타임 시 실행) 

7.스프링은 MessageConverter를 가지고 있다. 기본값은 현재 Json이다.

-Jackson데이터를 Json데이터로 반환해 주는 라이브러리

8.스프링은 Buffered R/W 을 하게 사용할 수 있다.

JPA (Java Persistence Api) : dbms에 기록할 수 있는 환경을 제공하는 API


1.JPA는 Java Persistence API이다.

2.JPA는 ORM(Object Relational Mapping)기술이다

- 객체를 db에 연결하는 방법론

3.JPA는 반복적인 CRUD 작업을 생략하게 해준다.

4.JPA는 영속성 컨텍스트를 가지고 있다.

- 데이터를 영구적으로 저장하게 해 줌
- context(대상에 대한 정보)

5.JPA는 DB와 OOP의 불일치성을 해결하기 위한 방법론을 제공한다.

스프링부트 동작 원리 

(1) 내장 톰캣을 가진다.

- Socket 통신 : 운영체제가 가지고 있는 것. 여러 스레드와 소켓의 생성으로 정보를 주고받는 통신 (소켓통신) 연결이 계속 유지되어 있기 때문에 부하가 크다.
- http 통신 : stateless(연결 끊음)방식 , 부하가 적지만 재연결 시에 기억을 하지 못한다.
- URL : 자원 요청주소 (IP주소)
- URI : 자원 식별자
- request, response 방식 (갑은 을의 ip주소를 알지 못한다)
- 톰캣의 역할 : 자바 코드를 컴파일 하고 html 문서로 반환

(2) 서블릿 컨테이너

- 요청이 들어올 때 마다 스레드를 생성하고 새로운 서블릿 객체를 생성한다.

(3) web.xml

- ServletContext의 초기 파라미터 설정
